// –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
import 'dart:math';

import 'command.dart';
import 'com/credit.dart' as credit;
import 'telegram.dart' as tg;
import 'person.dart';
import 'config.dart';
import 'utils.dart' as utils;

import 'com/image/image.dart';
import 'com/image/casino_image.dart';
// –ü–∞–∫–µ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram API —Ç–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º
import 'package:teledart/model.dart';

// –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –µ–º–æ–¥–∂—ñ –≤ –∫–∞–∑–∏–Ω–æ:
// "üÖ±Ô∏è", "üçá", "üçã", "7Ô∏è‚É£"
const casinoEmoji = {"üÖ±Ô∏è", "üçá", "üçã", "7Ô∏è‚É£"};

class CasinoResult {
  // –ó–º—ñ–Ω–Ω—ñ –∑ —è–∫–∏–º–∏ –±–∞–≥–∞—Ç–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ–º–æ: –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
  bool jackpot = false;
  int reward = 0;
  DrawRequest drawRequest = DrawRequest.none;

  // –ú–µ–Ω—ñ –¥—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, —â–æ —è –ø—Ä–∏–¥—É–º–∞–≤ –∑–º—ñ–Ω–Ω—É "isNegative" —Ç–∞
  // –ó–ê–í–ñ–î–ò —Ç—Ä–∏–º–∞—é –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –ü–û–ó–ò–¢–ò–í–ù–ò–ú —á–∏—Å–ª–æ–º.
  bool isNegative = false;

  CasinoResult((String, String, String) r) {
    // –û–∑–Ω–∞—á–∞—î –º—ñ–Ω—É—Å–æ–≤—É –Ω–∞–≥–æ—Ä–æ–¥—É
    isNegative = _deduceIsNegativeReward(r);

    // üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è –∞–±–æ üçáüçáüçá –∞–±–æ üçãüçãüçã –∞–±–æ 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£
    if (r.$1 == r.$2 && r.$2 == r.$3) {
      drawRequest = isNegative 
        ? DrawRequest.casinoNegative3 
        : DrawRequest.casino3;
      reward = JudgeConfig.instance.casinoRewardHigh;
      jackpot = _randomizeJackpot();
    }
    // 7Ô∏è‚É£7Ô∏è‚É£[X] –∞–±–æ [X]7Ô∏è‚É£7Ô∏è‚É£
    else if (r.$1 == r.$2 || r.$2 == r.$3) {
      drawRequest = isNegative 
        ? DrawRequest.casinoNegative2 
        : DrawRequest.casino2;
      reward = JudgeConfig.instance.casinoRewardMedium;
    }
    else {
      drawRequest = isNegative 
        ? DrawRequest.casinoNegative1
        : DrawRequest.casino1;
      reward = JudgeConfig.instance.casinoRewardLow;
    }

    if (jackpot) {
      drawRequest = isNegative ? DrawRequest.casinoAntiJackpot 
                               : DrawRequest.casinoJackpot;
      reward = JudgeConfig.instance.casinoRewardJackpot;
    } else {
      // –î–æ–¥–∞—î–º–æ —â–µ —Ä–∞–Ω–¥–æ–º–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –∞–∑–∞—Ä—Ç—É.
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è "üçáüçáüçá" –Ω–∞–≥–æ—Ä–æ–¥–∞
      // –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 20'001 –¥–æ 40'000
      reward += Random().nextInt(reward);
    }
  }

  bool _deduceIsNegativeReward((String, String, String) r) =>
      Casino.countBadness(r) > 1;

  bool _randomizeJackpot() {
    var rate = JudgeConfig.instance.casinoJackpotRate;
    if (rate <= 0) rate = 1;
    final r = Random(DateTime.now().second).nextInt(rate);
    return r == 0;
  }
}







class Casino {
  static Future<CommandResult> gambleTelegram(TeleDartMessage message, (String, String, String) r) async {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    final (actor, target) = await tg.handleTelegramUserUpdate(message);
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    return await _handleSlotMachine(actor, r, Platform.telegram);
  }

  static int countBadness((String, String, String) r) {
    // –®—É–∫–∞—î–º–æ —á–∏ —î —Ö–æ—á –æ–¥–Ω–µ –µ–º–æ–¥–∂—ñ üÖ±Ô∏è –∞–±–æ üçã –≤ —Ö–æ—á –æ–¥–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
    // –Ø–∫—â–æ —Ç–∞–∫, —Ç–æ –≤–∏–≥—Ä–∞—à –±—É–¥–µ –º—ñ–Ω—É—Å–æ–≤–∏–π
    const badSymbols = ["üÖ±Ô∏è", "üçã"];

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ "–ø–æ–≥–∞–Ω–∏—Ö"
    int badCount = 0;
    if (badSymbols.contains(r.$1)) badCount++;
    if (badSymbols.contains(r.$2)) badCount++;
    if (badSymbols.contains(r.$3)) badCount++;

    return badCount;
  }

  /// –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ –∑ –µ–º–æ–¥–∂—ñ —Å–ª–æ—Ç –º–∞—à–∏–Ω–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "üçá", "üçã", "7Ô∏è‚É£".
  /// –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –µ–º–æ–¥–∂—ñ –≤ –∫–∞–∑–∏–Ω–æ: "üÖ±Ô∏è", "üçá", "üçã", "7Ô∏è‚É£"
  /// 
  /// –ê—Ä–≥—É–º–µ–Ω—Ç int –¥–æ–∑–≤–æ–ª—è—î —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –≤ Discord.
  /// –ü—Ä–æ—Å—Ç–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —ñ –ø–µ—Ä–µ–¥–∞—á–∞ int –¥–æ–∑–≤–æ–ª–∏—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É,
  /// –∞–ª–µ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–±–º–µ–∂—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –±–∞—á–∏—Ç—å —Å–ª–æ—Ç—ñ–≤*?
  /// "–°–ª–æ—Ç—ñ–≤" - –º–∞—î—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ, —â–æ –º–∏ –ø—Ä–∏–π–º–∞—î–º–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  ///            –±–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ—ó :casino:, –±–æ —ñ–¥–µ—è –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∞ Telegram
  static Future<(String, String, String)> decode(int diceValue) async {
    int value = diceValue - 1;
    String a, b, c;
    a = casinoEmoji.elementAt(value % 4);
    value = (value / 4).toInt();
    b = casinoEmoji.elementAt(value % 4);
    value = (value / 4).toInt();
    c = casinoEmoji.elementAt(value % 4);
    return (a, b, c);
  }

  static Future<bool> _canActorGambleToday(Person actor) async {
    final last = actor.lastUsedCasinoDate;
    if (last == null) return true;

    final diff = DateTime.now().difference(last);
    return diff.inHours >= JudgeConfig.instance.casinoUserCooldownHours;
  }

  static Future<CommandResult> _handleSlotMachine(Person actor, (String, String, String) r, Platform platform) async {
  final bool isActorGambling = await _canActorGambleToday(actor);
    if (!isActorGambling) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω–Ω—é –¥–∞—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ.
      // –Ø–∫—â–æ –¥–∞—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è –º–∏ –∑–∞–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É.
      final fromDate = actor.lastUsedCasinoDate ?? DateTime.now();

      // –¢—É—Ç –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –¥–∞—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ —ñ –¥–æ–¥–∞—î–º–æ –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É.
      // –í –ø—Ä–æ–º—ñ–∂–∫—É —á–∞—Å—É –º–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä "hours",
      // —è–∫–∏–π –¥–æ—Ä—ñ–≤–Ω—é—î –∫—É–ª–¥–∞—É–Ω—É –≤ Singleton –∫–æ–Ω—Ñ—ñ“ë JudgeConfig  
      final toDate = fromDate.add(Duration(hours: JudgeConfig.instance.casinoUserCooldownHours));

      return CommandResult(
        text: '''–í–∞—à–∞ –æ—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞ –±—É–ª–∞ ${utils.humanReadableDifference(fromDate, DateTime.now())} —Ç–æ–º—É;
–ù–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä–∞ —á–µ—Ä–µ–∑ ${utils.humanReadableDifference(DateTime.now(), toDate)}.''',
        deleteBotMessageAfterSeconds: 30
      );
    }

    String? text;
    CasinoResult res = CasinoResult(r);
    if (!res.jackpot) text = "${res.isNegative ? "-" : ""}${res.reward}";

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await generateUserCasinoImage(actor, res.drawRequest, text ?? "", platform);

    // –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    Iterable<String> args = {res.reward.toString(), ""};
    return CommandResult(text: await submit(actor, r, res.isNegative, args), hasImage: true);
  }

  /// –í args –æ—á—ñ–∫—É—î –ø–µ—Ä—à–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤
  static Future<String> submit(Person actor,
                        (String, String, String) r,
                        bool isNegative, 
                        Iterable<String> args) async {
    final now = DateTime.now();

    // –î–æ–¥–∞—î–º–æ –∫–æ–º–±–æ –∞–±–æ —Å–∫–∏–¥—É—î–º–æ –∫–æ–º–±–æ
    final lastUsedCasino = actor.lastUsedCasinoDate ?? now;
    final diff = now.difference(lastUsedCasino);
    if (diff.inDays <= 1) {
      actor.casinoStreak++;
    } else {
      actor.casinoStreak = 0;
    }

    // –†–æ–±–∏–º–æ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–∞–∑–∏–Ω–æ
    actor.lastUsedCasinoDate = now;

    if (isNegative) {
      FuckUp value = await _deduceFuckUpBasedOnBadness(Casino.countBadness(r));
      actor.setFuckUpToday(value);
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    await actor.save();
    
    if (isNegative) {
      // –†–æ–±–∏–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—é —è–∫—â–æ –ø–µ—Ä–µ–≤–∞–∂–∞—î üÖ±Ô∏è –∞–±–æ üçã
      return await credit.SubSocialCredit().execute(actor, actor, args);
    }
    else {
      // –†–æ–±–∏–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—é —è–∫—â–æ –ø–µ—Ä–µ–≤–∞–∂–∞—î 7Ô∏è‚É£ –∞–±–æ üçá
      return await credit.AddSocialCredit().execute(actor, actor, args);
    }
  }

  static Future<FuckUp> _deduceFuckUpBasedOnBadness(int badCount) async {
    // –ú–∞–ø–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ —Ä—ñ–≤–Ω—è
    switch (badCount) {
      case 0: return FuckUp.none;
      case 1: return FuckUp.light;
      case 2: return FuckUp.medium;
      case 3: return FuckUp.fatal; // –Ø–∫—â–æ —Ç—Ä–∏ –ø–æ–≥–∞–Ω–∏—Ö –ø—ñ–¥—Ä—è–¥, —Ç–æ —Ü–µ –≤–∂–µ –∫—Ä–∏—Ç–∏—á–Ω–æ        
      default: return FuckUp.none;
    }
  }
}