import '../person.dart';
import '../command.dart';
import '../user_repository.dart';

class ModerCommand extends Command {
  @override
  String get name => "—ñ–Ω—Å–ø–µ–∫—Ü—ñ—è";

  @override
  String get slashName => "inspector";

  @override
  String get description => "–Ü–Ω—Å–ø–µ–∫—Ç–æ—Ä—Å—å–∫–∞ –º—î—Ç–æ–¥–∏—á–∫–∞";

  @override
  Role get minRole => Role.moder;

  @override
  Future<String> execute(Person person, Person? target, Iterable<String> args) async {
    return """
–©–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç ${person.dailyCreditsStr} –∫—Ä–µ–¥–∏—Ç—ñ–≤ –¥–ª—è:
== –ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏/–∫–æ–Ω—Ñ—ñ—Å–∫—É–≤–∞—Ç–∏ ==:
/give <–∫—ñ–ª—å–∫—ñ—Å—Ç—å> 
/take <–∫—ñ–ª—å–∫—ñ—Å—Ç—å> 
—Å—É–¥ + <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>
—Å—É–¥ - <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>
""";
  }
}

class AddModerCommand extends Command {
  @override
  String get name => "+—ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä";

  @override
  String get slashName => "hire_inspector";

  @override
  String get description => "–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–æ–ª—å —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞";

  @override
  Role get minRole => Role.admin;

  @override
  Future<String> execute(Person actor, Person? target, Iterable<String> args) async {
    if (target == null) return '‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.';
    final bool wasUserBefore = target.role == Role.user;
    final bool wasAdminBefore = target.role == Role.admin;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–¥—Ä—É–≥–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º)
    if (args.isEmpty) return "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤.";

    // –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤
    final limit = Person.parseSocialCredits(args.first);
    if (limit <= 0) return "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤.";

    // –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ª—ñ–º—ñ—Ç —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    final oldLimit = target.dailySocialCreditsLimit;

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    target.role = Role.moder;
    target.setDailySocialCreditsLimit(limit);
    await UserRepository.instance.updateUser(target);
    
    final stonksMsg = (wasUserBefore) ? "–≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω -> —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä ‚¨Üüìà" : 
                      (wasAdminBefore) ? "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä -> —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä ‚¨á" : "";
    final limitMsg = (oldLimit > limit) ? "–ª—ñ–º—ñ—Ç $oldLimit üí∏ -> $limit ‚¨áüíµ" : "–ª—ñ–º—ñ—Ç $oldLimit üíµ -> ‚¨Üüí∏ $limit";
    return """
‚úÖ ${target.name(null)}
$stonksMsg
$limitMsg
""";
  }
}

class SubModerCommand extends Command {
  @override
  String get name => "-—ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä";

  @override
  String get slashName => "fire_inspector";

  @override
  String get description => "–ó–Ω—è—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–ª—å —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞";

  @override
  Role get minRole => Role.admin;

  @override
  Future<String> execute(Person person, Person? target, Iterable<String> args) async {
    return '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞!';
  }
}
