import '../person.dart';
import '../command.dart';

class HelpCommand extends Command {
  @override
  String get name => "–¥–æ–ø–æ–º–æ–≥–∞";

  @override
  String get slashName => "help";

  @override
  String get description => "–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º";

  @override
  int get deleteUserMessageAfterSeconds => 30;

  @override
  int get deleteBotMessageAfterSeconds => 0; // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥

  @override
  Future<String> execute(Person actor, Person? target, Iterable<String> args) async {
    Person person;
    // –Ø–∫—â–æ —î —Ü—ñ–ª—å–æ–≤–∞ –æ—Å–æ–±–∞ —ñ —ó—ó —Ä–æ–ª—å –Ω–µ –≤–∏—â–∞ –∑–∞ —Ä–æ–ª—å –∞–∫—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—É—î–º–æ —ó–π –¥–æ–≤—ñ–¥–∫—É
    if (target != null && actor.role.index >= target.role.index) {
      person = target;
    } else {
      person = actor;
    }
    return await executeFor(person);
  }

  Future<String> executeFor(Person person) async {
    return """
Source code: github.com/setbe/judge
${person.role == Role.moder ? "–õ—ñ–º—ñ—Ç —Å—å–æ–≥–æ–¥–Ω—ñ: ${person.dailyCreditsStr} –∫—Ä–µ–¥–∏—Ç—ñ–≤" : ""}
–ö–æ–º–∞–Ω–¥–∏:
üé∞
/i - —Å—É–¥ —è - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–µ–±–µ
/help - —Å—É–¥ –¥–æ–ø–æ–º–æ–≥–∞ - —Ü—è –¥–æ–≤—ñ–¥–∫–∞
/highscore - —Å—É–¥ –∫—Ä–∞—â—ñ - —Ç–∞–±–ª–∏—Ü—è –∑ –∫—Ä–∞—â–∏–º–∏
/lowscore - —Å—É–¥ –≥—ñ—Ä—à—ñ - —Ç–∞–±–ª–∏—Ü—è –∑ –≥—ñ—Ä—à–∏–º–∏
${person.role.index > Role.user.index ? "/inspector - —Å—É–¥ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—è - —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä—Å—å–∫–∞ –º—î—Ç–æ–¥–∏—á–∫–∞" : ""}
${person.role == Role.admin ? "/admin - —Å—É–¥ –∞–¥–º—ñ–Ω - –∞–¥–º—ñ–Ω—Å—å–∫–∞ –¥–æ–≤—ñ–¥–∫–∞" : ""}
""";
  }
}

class Help2Command extends Command {
  @override
  String get name => "–∫–æ–º–∞–Ω–¥–∏";

  @override
  String get slashName => "commands";

  @override
  String get description => "–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º";

  @override
  int get deleteUserMessageAfterSeconds => 30;

  @override
  int get deleteBotMessageAfterSeconds => 0; // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥

  @override
  Future<String> execute(Person person, Person? target, Iterable<String> args) async {
    return HelpCommand().execute(person, target, args); // –í–∏–∫–ª–∏–∫ —Å—Ö–æ–∂–æ—é –∑–∞ –Ω–∞–∑–≤–æ—é –∫–æ–º–∞–Ω–¥–æ—é
  }
}

class DebugPrintCommand extends Command {
  @override
  String get name => "debug";

  @override
  String get slashName => "judge_debug";

  @override
  String get description => "–í–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞";

  @override
  Role get minRole => Role.admin;

  @override
  int get deleteUserMessageAfterSeconds => 1;

  @override
  int get deleteBotMessageAfterSeconds => 20; // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥

  @override
  Future<String> execute(Person person, Person? target, Iterable<String> args) async {
    return await Person.debugString(target ?? person);
  }
}